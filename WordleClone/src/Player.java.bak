import java.util.*;

/**
 * Maintains player statistics and information
 * @author Joe Hummer
 * @author Nick Schauer
 * @author Nick Sanford
 * @author Ben Morris
 */
public class Player {
    
    /** The amount of points subtracted from the players score per guess */
    public static final int POINT_COST_PER_GUESS = 10;
    
    /** The amount of points each player receives in a new round */
    public static final int STARTING_POINTS = 60;
    
    /** The minimum number of guesses a player can make to win a round */
    public static final int MINIMUM_GUESSES = 1;
    
    /** The maximum number of guesses a player can make to win a round */
    public static final int MAXIMUM_GUESSES = 6;
    
    /** Tracks the player's current score */
    private int score;
    
    /** The player's name */
    private String name;
    
    /**
     * Constructs the player name and score
     */
    public Player() {
        name = null;
        score = 0;
    }
    
    /**
     * Returns the player score
     * @return score The players total point value in the game so far
     */
    public int getScore() {
        return score;
    }
    
    /**
     * Returns the player object
     * @return this The player object
     */
    public Player getPlayer() {
        return this;
    }

    /**
     * Adds the appropriate amount of points to the player's score depending on the amount of guesses
     * @param currentGuess The amount of guesses the player has in a round
     * @throws IllegalArgumentException if the number of guesses is lower than 1 or less than 6
     */
    public void addScore(int currentGuess) {
        if (currentGuess > MAXIMUM_GUESSES || currentGuess < MINIMUM_GUESSES) {
            throw new IllegalArgumentException("Amount of guesses incorrect");
        }
        int points = STARTING_POINTS;
        for (int i = currentGuess; i > MINIMUM_GUESSES; i--) {
            points = points - POINT_COST_PER_GUESS;
        }
        score += points;
    }
    
    /**
     * Returns the player's name
     * @return name The name of the player
     */
    public String getName() {
        Random rnd = new Random();
        return name;
    }
    
    /**
     * Adds/Replaces a players name
     * @param name The new name of the player
     */
    public void addName(String name) {
        this.name = name;
    }
    
}